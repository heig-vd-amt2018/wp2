swagger: '2.0'

info:
  version: '0.1.0'
  title: WP2 API
  description: Gamification API for WP2

host: localhost:8080
basePath: /api

tags:
  - name: "Applications"
    description: "These endpoints are related to the applications. Development only."
  - name: "Players"
    description: "These endpoints are related to the players."
  - name: "Badges"
    description: "These endpoints are related to the badges."
  - name: "Point scales"
    description: "These endpoints are related to the point scales."
  - name: "Rules"
    description: "These endpoints are related to the rules."
  - name: "Events"
    description: "These endpoints are related to the events."

responses:
  Unauthorized:
    description: "Unauthorized access."
  Forbidden:
    description: "The entity do not have the rights to access the ressource."
  Created:
    description: "The entity has been created."
    schema:
      type: "string"
  Conflict:
    description: "The identifier is already used. Please change and try again."
  NotFound:
    description: "The specified resource was not found."
    schema:
      type: "string"

paths:
  /applications:
    post:
      tags:
        - "Applications"
      description: "Create a new application"
      operationId: createApplication
      security: []
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/application"
      responses:
        200:
          description: "The application has been created."
        401:
          $ref: "#/responses/Unauthorized"
        409:
          $ref: "#/responses/Conflict"


  /players/{username}:
    get:
      tags:
        - "Players"
      description: "Return a specific player for the application with its badges and point scales"
      operationId: getPlayer
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/username"
      produces:
        - application/json
      responses:
        200:
          description: "Player has been successfully retrieved."
          schema:
            $ref: '#/definitions/player'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"

  /badges:
    post:
      tags:
        - "Badges"
      description: "Create a new badge for the application"
      operationId: createBadge
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/badgePost"
      responses:
        201:
          $ref: "#/responses/Created"
        401:
          $ref: "#/responses/Unauthorized"
        409:
          $ref: "#/responses/Conflict"
    get:
      tags:
        - "Badges"
      description: "Get all the badges for the application"
      operationId: getBadges
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
      responses:
        200:
          description: "Badges have been successfully retrieved."
          schema:
            type: array
            items:
              $ref: '#/definitions/badge'
        401:
          $ref: "#/responses/Unauthorized"

  /badges/{badgeName}:
    get:
      tags:
        - "Badges"
      description: "Return a specific badge for the application"
      operationId: getBadge
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/badgeName"
      produces:
        - application/json
      responses:
        200:
          description: "Badge has been successfully retrieved."
          schema:
            $ref: '#/definitions/badge'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "Badges"
      description: "Update a specific badge for the application"
      operationId: updateBadge
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/badgeName"
        - $ref: "#/parameters/badgePatch"
      responses:
        200:
          description: "Badge has been successfully updated."
          schema:
            type: "string"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"

  /pointScales:
    post:
      tags:
        - "Point scales"
      description: "Create a new point scale for the application"
      operationId: createPointScale
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/pointScalePost"
      responses:
        201:
          $ref: "#/responses/Created"
        401:
          $ref: "#/responses/Unauthorized"
        409:
          $ref: "#/responses/Conflict"
    get:
      tags:
        - "Point scales"
      description: "Get all the point scales for the application"
      operationId: getPointScales
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
      responses:
        200:
          description: "Point scales have been successfully retrieved."
          schema:
            type: array
            items:
              $ref: "#/definitions/pointScaleDescription"
        '401':
          $ref: "#/responses/Unauthorized"

  /pointScales/{pointScaleName}:
    get:
      tags:
        - "Point scales"
      description: "Return a specific point scale for the application"
      operationId: getPointScale
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/pointScaleName"
      produces:
        - application/json
      responses:
        200:
          description: "Point scale has been successfully retrieved."
          schema:
            $ref: "#/definitions/pointScaleDescription"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "Point scales"
      description: "Update a specific point scale for the application"
      operationId: updatePointScale
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/pointScaleName"
        - $ref: "#/parameters/pointScalePatch"
      responses:
        200:
          description: "Point scale has been successfully updated."
          schema:
            type: "string"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"

  /rules:
    post:
      tags:
        - "Rules"
      description: "Create a new rule for the application"
      operationId: createRule
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/rulePost"
      responses:
        201:
          $ref: "#/responses/Created"
        401:
          $ref: "#/responses/Unauthorized"
        409:
          $ref: "#/responses/Conflict"
    get:
      tags:
        - "Rules"
      description: "Get all the rules for the application"
      operationId: getRules
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
      responses:
        200:
          description: "Rules have been successfully retrieved."
          schema:
            type: array
            items:
              $ref: '#/definitions/rule'
        '401':
          $ref: "#/responses/Unauthorized"

  /rules/{ruleName}:
    get:
      tags:
        - "Rules"
      description: "Return a specific badge for the application"
      operationId: getRule
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/ruleName"
      produces:
        - application/json
      responses:
        200:
          description: "Rule has been successfully retrieved."
          schema:
            $ref: '#/definitions/rule'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    patch:
      tags:
        - "Rules"
      description: "Update a specific rule for the application"
      operationId: updateRule
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/ruleName"
        - $ref: "#/parameters/rulePatch"
      responses:
        200:
          description: "Rule has been successfully updated."
          schema:
            type: "string"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"

  /events:
    post:
      tags:
        - "Events"
      description: "Create a new event for the application"
      operationId: postEvent
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/apiKey"
        - $ref: "#/parameters/event"
      responses:
        200:
          description: "The event has been processed."
        401:
          $ref: "#/responses/Unauthorized"

definitions:
  player:
    type: object
    properties:
      badges:
        type: "array"
        items:
          type : "string"
      pointScaleSums:
        type: "array"
        items:
          $ref: "#/definitions/pointScaleAmount"

  badge:
    type: object
    properties:
      name:
        type: "string"
      description:
        type: "string"
      image:
        type: "string"

  pointScaleDescription:
    type: object
    properties:
      name:
        type: "string"
      description:
        type: "string"

  pointScaleAmount:
    type: object
    properties:
      pointScaleName:
        type: "string"
      amount:
        type: "integer"

  rule:
    properties:
      name:
        type: "string"
      eventType:
        type: "string"
      pointScales:
        type: "array"
        items:
          $ref: "#/definitions/pointScaleAmount"
      badges:
        type: "array"
        items:
          type: "string"

parameters:
  application:
    name: "application"
    description: "The application's details"
    in: "body"
    required: true
    schema:
      type: "object"
      required:
        - "apiKey"
      properties:
        apiKey:
          type: "string"

  apiKey:
    name: "apiKey"
    description: "The api key."
    in: header
    required: true
    type: "string"

  username:
    name: "username"
    description: "The username of the player."
    in: "path"
    required: true
    type: "string"

  badgeName:
    name: "badgeName"
    description: "The name of the badge."
    in: "path"
    required: true
    type: "string"
  badgePost:
    name: "badgePost"
    description: "The badge's details"
    in: "body"
    required: true
    schema:
      type: "object"
      required:
        - "name"
        - "description"
        - "image"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        image:
          type: "string"
  badgePatch:
    name: "badgePatch"
    description: "The badge's details"
    in: "body"
    required: true
    schema:
      type: "object"
      required:
        - "description"
        - "image"
      properties:
        description:
          type: "string"
        image:
          type: "string"

  pointScaleName:
    name: "pointScaleName"
    description: "The name of the point scale."
    in: "path"
    required: true
    type: "string"
  pointScalePost:
    name: "pointScalePost"
    description: "The point scale's details"
    in: "body"
    required: true
    schema:
      type: "object"
      required:
        - "name"
        - "description"
      properties:
        name:
          type: "string"
        description:
          type: "string"
  pointScalePatch:
    name: "pointScalePatch"
    description: "The point scale's details"
    in: "body"
    required: true
    schema:
      type: "object"
      required:
        - "description"
      properties:
        description:
          type: "string"

  ruleName:
    name: "ruleName"
    description: "The name of the rule."
    in: "path"
    required: true
    type: "string"
  rulePost:
    name: "rulePost"
    description: "The rule's details."
    in: "body"
    required: true
    schema:
      type: "object"
      required:
        - "name"
        - "eventType"
      properties:
        name:
          type: "string"
        eventType:
          type: "string"
        pointScaleAmounts:
          type: "array"
          items:
            $ref: "#/definitions/pointScaleAmount"
        badges:
          type: "array"
          items:
            type : "string"
  rulePatch:
    name: "rulePatch"
    description: "The rule's details."
    in: "body"
    required: true
    schema:
      type: "object"
      required:
        - "eventType"
      properties:
        eventType:
          type: "string"
        pointScaleAmounts:
          type: "array"
          items:
            $ref: "#/definitions/pointScaleAmount"
        badges:
          type: "array"
          items:
            type : "string"

  event:
    name: "event"
    description: "The event's details."
    in: "body"
    required: true
    schema:
      type: "object"
      required:
        - "username"
        - "eventType"
        - "timestamp"
        - "properties"
      properties:
        username:
          type: "string"
        eventType:
          type: "string"
        timestamp:
          type: "string"
          format: "date-time"
